// Code generated by protoc-gen-go.
// source: libs/src/kbox/arrangements.proto
// DO NOT EDIT!

/*
Package kbox is a generated protocol buffer package.

It is generated from these files:
	libs/src/kbox/arrangements.proto

It has these top-level messages:
	Meter
	SongFile
	Song
	Key
	Part
	Bar
	Beat
*/
package kbox

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Pitch int32

const (
	Pitch_UNKNOWN_KEY Pitch = 0
	Pitch_C           Pitch = 1
	Pitch_Csharp      Pitch = 2
	Pitch_Dflat       Pitch = 3
	Pitch_D           Pitch = 4
	Pitch_Dsharp      Pitch = 5
	Pitch_Eflat       Pitch = 6
	Pitch_E           Pitch = 7
	Pitch_F           Pitch = 8
	Pitch_Fsharp      Pitch = 9
	Pitch_Gflat       Pitch = 10
	Pitch_G           Pitch = 11
	Pitch_Gsharp      Pitch = 12
	Pitch_Aflat       Pitch = 13
	Pitch_A           Pitch = 14
	Pitch_Asharp      Pitch = 15
	Pitch_Bflat       Pitch = 16
	Pitch_B           Pitch = 17
)

var Pitch_name = map[int32]string{
	0:  "UNKNOWN_KEY",
	1:  "C",
	2:  "Csharp",
	3:  "Dflat",
	4:  "D",
	5:  "Dsharp",
	6:  "Eflat",
	7:  "E",
	8:  "F",
	9:  "Fsharp",
	10: "Gflat",
	11: "G",
	12: "Gsharp",
	13: "Aflat",
	14: "A",
	15: "Asharp",
	16: "Bflat",
	17: "B",
}
var Pitch_value = map[string]int32{
	"UNKNOWN_KEY": 0,
	"C":           1,
	"Csharp":      2,
	"Dflat":       3,
	"D":           4,
	"Dsharp":      5,
	"Eflat":       6,
	"E":           7,
	"F":           8,
	"Fsharp":      9,
	"Gflat":       10,
	"G":           11,
	"Gsharp":      12,
	"Aflat":       13,
	"A":           14,
	"Asharp":      15,
	"Bflat":       16,
	"B":           17,
}

func (x Pitch) String() string {
	return proto.EnumName(Pitch_name, int32(x))
}
func (Pitch) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Mode int32

const (
	Mode_UNKNOWN_MODE Mode = 0
	Mode_ionian       Mode = 1
	Mode_dorian       Mode = 2
	Mode_phrygian     Mode = 3
	Mode_lydian       Mode = 4
	Mode_mixolydrian  Mode = 5
	Mode_aeolian      Mode = 6
	Mode_locrian      Mode = 7
)

var Mode_name = map[int32]string{
	0: "UNKNOWN_MODE",
	1: "ionian",
	2: "dorian",
	3: "phrygian",
	4: "lydian",
	5: "mixolydrian",
	6: "aeolian",
	7: "locrian",
}
var Mode_value = map[string]int32{
	"UNKNOWN_MODE": 0,
	"ionian":       1,
	"dorian":       2,
	"phrygian":     3,
	"lydian":       4,
	"mixolydrian":  5,
	"aeolian":      6,
	"locrian":      7,
}

func (x Mode) String() string {
	return proto.EnumName(Mode_name, int32(x))
}
func (Mode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Quality int32

const (
	Quality_UNKNOWN_QUALITY Quality = 0
	Quality_maj             Quality = 1
	Quality_min             Quality = 2
	Quality_aug             Quality = 3
	Quality_sus             Quality = 4
	Quality_dom             Quality = 5
	Quality_dim             Quality = 6
	Quality_halfdim         Quality = 7
)

var Quality_name = map[int32]string{
	0: "UNKNOWN_QUALITY",
	1: "maj",
	2: "min",
	3: "aug",
	4: "sus",
	5: "dom",
	6: "dim",
	7: "halfdim",
}
var Quality_value = map[string]int32{
	"UNKNOWN_QUALITY": 0,
	"maj":             1,
	"min":             2,
	"aug":             3,
	"sus":             4,
	"dom":             5,
	"dim":             6,
	"halfdim":         7,
}

func (x Quality) String() string {
	return proto.EnumName(Quality_name, int32(x))
}
func (Quality) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Interval int32

const (
	Interval_p1     Interval = 0
	Interval_min2   Interval = 1
	Interval_maj2   Interval = 2
	Interval_min3   Interval = 3
	Interval_maj3   Interval = 4
	Interval_p4     Interval = 5
	Interval_aug4   Interval = 6
	Interval_dim5   Interval = 7
	Interval_p5     Interval = 8
	Interval_sharp5 Interval = 9
	Interval_min6   Interval = 10
	Interval_maj6   Interval = 11
	Interval_min7   Interval = 12
	Interval_maj7   Interval = 13
	Interval_p8     Interval = 14
	Interval_dim9   Interval = 15
	Interval_min9   Interval = 16
	Interval_aug8   Interval = 17
	Interval_maj9   Interval = 18
	Interval_dim10  Interval = 19
	Interval_min10  Interval = 20
	Interval_aug9   Interval = 21
	Interval_maj10  Interval = 22
	Interval_dim11  Interval = 23
	Interval_p11    Interval = 24
	Interval_aug10  Interval = 25
	Interval_aug11  Interval = 27
	Interval_p12    Interval = 28
	Interval_dim13  Interval = 29
	Interval_min13  Interval = 30
	Interval_aug12  Interval = 31
	Interval_maj13  Interval = 32
	Interval_dim14  Interval = 33
	Interval_min14  Interval = 34
	Interval_aug13  Interval = 35
	Interval_maj14  Interval = 36
	Interval_dim15  Interval = 37
	Interval_p15    Interval = 38
	Interval_aug14  Interval = 39
	Interval_aug15  Interval = 40
)

var Interval_name = map[int32]string{
	0:  "p1",
	1:  "min2",
	2:  "maj2",
	3:  "min3",
	4:  "maj3",
	5:  "p4",
	6:  "aug4",
	7:  "dim5",
	8:  "p5",
	9:  "sharp5",
	10: "min6",
	11: "maj6",
	12: "min7",
	13: "maj7",
	14: "p8",
	15: "dim9",
	16: "min9",
	17: "aug8",
	18: "maj9",
	19: "dim10",
	20: "min10",
	21: "aug9",
	22: "maj10",
	23: "dim11",
	24: "p11",
	25: "aug10",
	27: "aug11",
	28: "p12",
	29: "dim13",
	30: "min13",
	31: "aug12",
	32: "maj13",
	33: "dim14",
	34: "min14",
	35: "aug13",
	36: "maj14",
	37: "dim15",
	38: "p15",
	39: "aug14",
	40: "aug15",
}
var Interval_value = map[string]int32{
	"p1":     0,
	"min2":   1,
	"maj2":   2,
	"min3":   3,
	"maj3":   4,
	"p4":     5,
	"aug4":   6,
	"dim5":   7,
	"p5":     8,
	"sharp5": 9,
	"min6":   10,
	"maj6":   11,
	"min7":   12,
	"maj7":   13,
	"p8":     14,
	"dim9":   15,
	"min9":   16,
	"aug8":   17,
	"maj9":   18,
	"dim10":  19,
	"min10":  20,
	"aug9":   21,
	"maj10":  22,
	"dim11":  23,
	"p11":    24,
	"aug10":  25,
	"aug11":  27,
	"p12":    28,
	"dim13":  29,
	"min13":  30,
	"aug12":  31,
	"maj13":  32,
	"dim14":  33,
	"min14":  34,
	"aug13":  35,
	"maj14":  36,
	"dim15":  37,
	"p15":    38,
	"aug14":  39,
	"aug15":  40,
}

func (x Interval) String() string {
	return proto.EnumName(Interval_name, int32(x))
}
func (Interval) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Meter struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Note  int32 `protobuf:"varint,2,opt,name=note" json:"note,omitempty"`
}

func (m *Meter) Reset()                    { *m = Meter{} }
func (m *Meter) String() string            { return proto.CompactTextString(m) }
func (*Meter) ProtoMessage()               {}
func (*Meter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Meter) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Meter) GetNote() int32 {
	if m != nil {
		return m.Note
	}
	return 0
}

type SongFile struct {
	Song *Song `protobuf:"bytes,1,opt,name=song" json:"song,omitempty"`
}

func (m *SongFile) Reset()                    { *m = SongFile{} }
func (m *SongFile) String() string            { return proto.CompactTextString(m) }
func (*SongFile) ProtoMessage()               {}
func (*SongFile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SongFile) GetSong() *Song {
	if m != nil {
		return m.Song
	}
	return nil
}

type Song struct {
	Name string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Part []*Part `protobuf:"bytes,2,rep,name=part" json:"part,omitempty"`
}

func (m *Song) Reset()                    { *m = Song{} }
func (m *Song) String() string            { return proto.CompactTextString(m) }
func (*Song) ProtoMessage()               {}
func (*Song) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Song) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Song) GetPart() []*Part {
	if m != nil {
		return m.Part
	}
	return nil
}

type Key struct {
	Tonic Pitch `protobuf:"varint,1,opt,name=tonic,enum=kbox.Pitch" json:"tonic,omitempty"`
	Mode  Mode  `protobuf:"varint,2,opt,name=mode,enum=kbox.Mode" json:"mode,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Key) GetTonic() Pitch {
	if m != nil {
		return m.Tonic
	}
	return Pitch_UNKNOWN_KEY
}

func (m *Key) GetMode() Mode {
	if m != nil {
		return m.Mode
	}
	return Mode_UNKNOWN_MODE
}

type Part struct {
	// first part must have root / meter, subsequent parts will default
	// to the first part's root meter, unless specified otherwise.
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Key     *Key   `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Meter   *Meter `protobuf:"bytes,3,opt,name=meter" json:"meter,omitempty"`
	Repeat  int32  `protobuf:"varint,4,opt,name=repeat" json:"repeat,omitempty"`
	Comment string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	Bar     []*Bar `protobuf:"bytes,10,rep,name=bar" json:"bar,omitempty"`
}

func (m *Part) Reset()                    { *m = Part{} }
func (m *Part) String() string            { return proto.CompactTextString(m) }
func (*Part) ProtoMessage()               {}
func (*Part) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Part) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Part) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Part) GetMeter() *Meter {
	if m != nil {
		return m.Meter
	}
	return nil
}

func (m *Part) GetRepeat() int32 {
	if m != nil {
		return m.Repeat
	}
	return 0
}

func (m *Part) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Part) GetBar() []*Bar {
	if m != nil {
		return m.Bar
	}
	return nil
}

type Bar struct {
	B []*Beat `protobuf:"bytes,2,rep,name=b" json:"b,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (m *Bar) String() string            { return proto.CompactTextString(m) }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Bar) GetB() []*Beat {
	if m != nil {
		return m.B
	}
	return nil
}

type Beat struct {
	// the chord, eg, r:Bflat q:min a:7
	N Interval   `protobuf:"varint,1,opt,name=n,enum=kbox.Interval" json:"n,omitempty"`
	Q []Quality  `protobuf:"varint,2,rep,packed,name=q,enum=kbox.Quality" json:"q,omitempty"`
	I []Interval `protobuf:"varint,3,rep,packed,name=i,enum=kbox.Interval" json:"i,omitempty"`
	O []Interval `protobuf:"varint,4,rep,packed,name=o,enum=kbox.Interval" json:"o,omitempty"`
	C int32      `protobuf:"varint,5,opt,name=c" json:"c,omitempty"`
	L []string   `protobuf:"bytes,6,rep,name=l" json:"l,omitempty"`
}

func (m *Beat) Reset()                    { *m = Beat{} }
func (m *Beat) String() string            { return proto.CompactTextString(m) }
func (*Beat) ProtoMessage()               {}
func (*Beat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Beat) GetN() Interval {
	if m != nil {
		return m.N
	}
	return Interval_p1
}

func (m *Beat) GetQ() []Quality {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *Beat) GetI() []Interval {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *Beat) GetO() []Interval {
	if m != nil {
		return m.O
	}
	return nil
}

func (m *Beat) GetC() int32 {
	if m != nil {
		return m.C
	}
	return 0
}

func (m *Beat) GetL() []string {
	if m != nil {
		return m.L
	}
	return nil
}

func init() {
	proto.RegisterType((*Meter)(nil), "kbox.Meter")
	proto.RegisterType((*SongFile)(nil), "kbox.SongFile")
	proto.RegisterType((*Song)(nil), "kbox.Song")
	proto.RegisterType((*Key)(nil), "kbox.Key")
	proto.RegisterType((*Part)(nil), "kbox.Part")
	proto.RegisterType((*Bar)(nil), "kbox.Bar")
	proto.RegisterType((*Beat)(nil), "kbox.Beat")
	proto.RegisterEnum("kbox.Pitch", Pitch_name, Pitch_value)
	proto.RegisterEnum("kbox.Mode", Mode_name, Mode_value)
	proto.RegisterEnum("kbox.Quality", Quality_name, Quality_value)
	proto.RegisterEnum("kbox.Interval", Interval_name, Interval_value)
}

func init() { proto.RegisterFile("libs/src/kbox/arrangements.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x94, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0xbd, 0x22, 0x29, 0x4a, 0x23, 0x59, 0x9e, 0x6c, 0xd2, 0x94, 0x85, 0xd3, 0x44, 0x51,
	0xbf, 0x0c, 0x1d, 0x6c, 0x53, 0x1f, 0x49, 0xdc, 0x9b, 0x15, 0x7f, 0x34, 0x70, 0xed, 0x34, 0x6c,
	0x83, 0xa2, 0xa7, 0x62, 0x25, 0x31, 0x12, 0x1d, 0x92, 0xab, 0x50, 0x54, 0x11, 0x3d, 0x4a, 0xaf,
	0xbd, 0xf5, 0x1d, 0xfa, 0x70, 0xc5, 0x0c, 0x77, 0x51, 0x14, 0xf1, 0x49, 0xff, 0x99, 0xdf, 0x7f,
	0x66, 0x76, 0x67, 0x05, 0x42, 0x37, 0x4d, 0xa6, 0xeb, 0xa3, 0x75, 0x31, 0x3b, 0x7a, 0x3f, 0xd5,
	0x1f, 0x8f, 0x54, 0x51, 0xa8, 0x7c, 0x11, 0x67, 0x71, 0x5e, 0xae, 0x0f, 0x57, 0x85, 0x2e, 0xb5,
	0x74, 0x09, 0xf4, 0x42, 0xf0, 0xae, 0xe3, 0x32, 0x2e, 0xe4, 0x03, 0xf0, 0x66, 0x7a, 0x93, 0x97,
	0x81, 0xe8, 0x8a, 0x03, 0x2f, 0xaa, 0x02, 0x29, 0xc1, 0xcd, 0x75, 0x19, 0x07, 0x35, 0x4e, 0xb2,
	0xee, 0xf5, 0xa1, 0xf1, 0xb3, 0xce, 0x17, 0x17, 0x49, 0x1a, 0xcb, 0xc7, 0xe0, 0xae, 0x75, 0xbe,
	0xe0, 0xa2, 0xd6, 0x00, 0x0e, 0xa9, 0xe7, 0x21, 0xd1, 0x88, 0xf3, 0xbd, 0xef, 0xc1, 0xa5, 0x88,
	0xfb, 0xa8, 0x2c, 0x66, 0x5f, 0x33, 0x62, 0x4d, 0xb5, 0x2b, 0x55, 0x94, 0x41, 0xad, 0xeb, 0xfc,
	0x57, 0xfb, 0x93, 0x2a, 0xca, 0x88, 0xf3, 0xbd, 0x1f, 0xc0, 0xb9, 0x8a, 0xb7, 0xf2, 0x29, 0x78,
	0xa5, 0xce, 0x93, 0x19, 0xd7, 0x76, 0x06, 0x2d, 0xe3, 0x4b, 0xca, 0xd9, 0x32, 0xaa, 0x08, 0x75,
	0xca, 0xf4, 0xbc, 0x3a, 0x65, 0xc7, 0x76, 0xba, 0xd6, 0xf3, 0x38, 0xe2, 0x7c, 0xef, 0x6f, 0x01,
	0x2e, 0x35, 0xbe, 0xf3, 0x18, 0xfb, 0xe0, 0xbc, 0x8f, 0xb7, 0x5c, 0xdb, 0x1a, 0x34, 0xab, 0xda,
	0xab, 0x78, 0x1b, 0x51, 0x96, 0x86, 0x67, 0xb4, 0x9e, 0xc0, 0x61, 0x6c, 0x86, 0xf3, 0xc6, 0xa2,
	0x8a, 0xc8, 0x87, 0x50, 0x2f, 0xe2, 0x55, 0xac, 0xca, 0xc0, 0xe5, 0x25, 0x99, 0x48, 0x06, 0xe0,
	0xcf, 0x74, 0x46, 0x1b, 0x0f, 0x3c, 0x1e, 0x67, 0x43, 0x9a, 0x38, 0x55, 0x45, 0x00, 0x7c, 0x6f,
	0x33, 0x71, 0xa2, 0x8a, 0x88, 0xb2, 0xbd, 0x27, 0xe0, 0x4c, 0x54, 0x21, 0x03, 0x10, 0xd3, 0xff,
	0x6f, 0x66, 0x12, 0xab, 0x32, 0x12, 0xd3, 0xde, 0x9f, 0x02, 0x5c, 0xd2, 0xf2, 0x11, 0x88, 0xdc,
	0x2c, 0xa5, 0x53, 0x59, 0x5e, 0xe5, 0x65, 0x5c, 0xfc, 0xa1, 0xd2, 0x48, 0xe4, 0x72, 0x1f, 0xc4,
	0x07, 0x6e, 0xd0, 0x19, 0xec, 0x56, 0xf4, 0xcd, 0x46, 0xa5, 0x49, 0xb9, 0x8d, 0xc4, 0x07, 0x2a,
	0x4d, 0x02, 0x87, 0xe1, 0x27, 0xa5, 0x09, 0x51, 0x1d, 0xb8, 0x77, 0x53, 0x2d, 0xdb, 0x20, 0x66,
	0x7c, 0x23, 0x2f, 0x12, 0x33, 0x8a, 0xd2, 0xa0, 0xde, 0x75, 0x0e, 0x9a, 0x91, 0x48, 0xfb, 0xff,
	0x08, 0xf0, 0xf8, 0x65, 0xe4, 0x1e, 0xb4, 0xde, 0xde, 0x5c, 0xdd, 0xbc, 0xfe, 0xf5, 0xe6, 0xf7,
	0xab, 0xf3, 0xdf, 0x70, 0x47, 0x7a, 0x20, 0x5e, 0xa2, 0x90, 0x00, 0xf5, 0x97, 0xeb, 0xa5, 0x2a,
	0x56, 0x58, 0x93, 0x4d, 0xf0, 0xce, 0xde, 0xa5, 0xaa, 0x44, 0x87, 0xe8, 0x19, 0xba, 0x44, 0xcf,
	0x2a, 0xea, 0x11, 0x3d, 0x67, 0x5a, 0x27, 0x7a, 0x8e, 0x3e, 0xfd, 0x5c, 0x60, 0x83, 0x4c, 0x17,
	0x95, 0xa9, 0x49, 0xa6, 0x4b, 0x36, 0x01, 0xd1, 0x4b, 0x6c, 0x11, 0xbd, 0xac, 0x68, 0x9b, 0xe8,
	0x29, 0xd3, 0x5d, 0xa2, 0xa7, 0xd8, 0x21, 0x7a, 0x5a, 0xd1, 0x3d, 0xa2, 0x13, 0xa6, 0x48, 0x74,
	0x82, 0xf7, 0xfa, 0x1b, 0x70, 0xe9, 0x5f, 0x23, 0x11, 0xda, 0xf6, 0xf0, 0xd7, 0xaf, 0xcf, 0xce,
	0x71, 0x87, 0xea, 0x12, 0x9d, 0x27, 0x2a, 0xaf, 0xae, 0x30, 0xd7, 0x05, 0xe9, 0x9a, 0x6c, 0x43,
	0x63, 0xb5, 0x2c, 0xb6, 0x0b, 0x8a, 0x1c, 0x22, 0xe9, 0x76, 0x4e, 0xda, 0xa5, 0x05, 0x64, 0xc9,
	0x47, 0x9d, 0x6e, 0xe7, 0x6c, 0xf5, 0x64, 0x0b, 0x7c, 0x15, 0xeb, 0x94, 0x82, 0x3a, 0x05, 0xa9,
	0x9e, 0x31, 0xf1, 0xfb, 0x0a, 0x7c, 0xf3, 0x36, 0xf2, 0x3e, 0xec, 0xd9, 0xc9, 0x6f, 0xde, 0x9e,
	0xfe, 0xf8, 0xea, 0x17, 0x5a, 0x9d, 0x0f, 0x4e, 0xa6, 0x6e, 0x51, 0xb0, 0x48, 0x68, 0xac, 0x0f,
	0x8e, 0xda, 0x2c, 0xd0, 0x21, 0xb1, 0xde, 0xac, 0xd1, 0x25, 0x31, 0xd7, 0x19, 0x7a, 0x2c, 0x92,
	0xac, 0x1a, 0xb1, 0x54, 0xe9, 0x3b, 0x0a, 0xfc, 0xfe, 0x5f, 0x0e, 0x34, 0xec, 0x23, 0xca, 0x3a,
	0xd4, 0x56, 0x21, 0xee, 0xc8, 0x06, 0xb8, 0x59, 0x92, 0x0f, 0x50, 0xb0, 0x52, 0xb7, 0x03, 0xac,
	0x99, 0xdc, 0x10, 0x1d, 0x93, 0x1b, 0xa2, 0xcb, 0xfe, 0x11, 0x7a, 0x94, 0x51, 0x9b, 0xc5, 0x08,
	0xeb, 0xa4, 0xe6, 0x49, 0x36, 0x46, 0x9f, 0xd9, 0xb8, 0x7a, 0x14, 0xde, 0xeb, 0x18, 0x9b, 0xa6,
	0xc7, 0x33, 0x04, 0xd3, 0xe3, 0x19, 0xb6, 0x4c, 0xee, 0x39, 0xb6, 0x4d, 0xee, 0x39, 0xee, 0x72,
	0xed, 0x0b, 0xec, 0x98, 0x6e, 0x27, 0xb8, 0x67, 0x5c, 0x27, 0x88, 0x66, 0xd6, 0x0b, 0xbc, 0x67,
	0xfc, 0x27, 0x28, 0xe9, 0xc1, 0xe6, 0x49, 0x16, 0x1e, 0xe3, 0x7d, 0x92, 0x59, 0x92, 0x87, 0xc7,
	0xf8, 0xc0, 0x38, 0x4f, 0xf0, 0x33, 0x4e, 0xaa, 0xdb, 0xf0, 0x18, 0x1f, 0x5a, 0x6b, 0x88, 0x9f,
	0xd3, 0x42, 0x56, 0x61, 0x88, 0x01, 0xe5, 0xd4, 0x66, 0x11, 0x1e, 0xe3, 0x17, 0x56, 0x86, 0xb8,
	0x5f, 0xe1, 0x01, 0x3e, 0xb2, 0x25, 0x43, 0xfc, 0xd2, 0x76, 0x1f, 0xe2, 0x63, 0xeb, 0x1c, 0xe0,
	0x13, 0xdb, 0x7e, 0x88, 0x5d, 0xeb, 0x1d, 0xe1, 0x53, 0xeb, 0x1d, 0x61, 0xcf, 0x7a, 0x87, 0xf8,
	0x95, 0xf5, 0x8e, 0xf0, 0x6b, 0xeb, 0x1d, 0xe3, 0x37, 0xd5, 0xac, 0x31, 0x7e, 0x6b, 0x9d, 0x23,
	0xfc, 0xce, 0xca, 0x31, 0x1e, 0x4c, 0xeb, 0xfc, 0x61, 0x1e, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xa7, 0x50, 0x5b, 0x4c, 0xbc, 0x05, 0x00, 0x00,
}
